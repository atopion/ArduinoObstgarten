{
  "_from": "ts-node-dev",
  "_id": "ts-node-dev@1.0.0-pre.44",
  "_inBundle": false,
  "_integrity": "sha512-M5ZwvB6FU3jtc70i5lFth86/6Qj5XR5nMMBwVxZF4cZhpO7XcbWw6tbNiJo22Zx0KfjEj9py5DANhwLOkPPufw==",
  "_location": "/ts-node-dev",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ts-node-dev",
    "fetchSpec": "latest",
    "name": "ts-node-dev",
    "raw": "ts-node-dev",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ts-node-dev/-/ts-node-dev-1.0.0-pre.44.tgz",
  "_shasum": "2f4d666088481fb9c4e4f5bc8f15995bd8b06ecb",
  "_spec": "ts-node-dev",
  "_where": "/home/atopi/ArduinoObstgarten/frontend/Server",
  "author": {
    "name": "Felix Gnass"
  },
  "bin": {
    "ts-node-dev": "./bin/ts-node-dev",
    "tsnd": "./bin/ts-node-dev"
  },
  "bugs": {
    "url": "https://github.com/whitecolor/ts-node-dev/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Daniel Gasienica",
      "email": "daniel@gasienica.ch",
      "url": "https://github.com/gasi/"
    }
  ],
  "dependencies": {
    "dateformat": "~1.0.4-1.2.3",
    "dynamic-dedupe": "^0.3.0",
    "filewatcher": "~3.0.0",
    "minimist": "^1.1.3",
    "mkdirp": "^0.5.1",
    "node-notifier": "^5.4.0",
    "resolve": "^1.0.0",
    "rimraf": "^2.6.1",
    "source-map-support": "^0.5.12",
    "tree-kill": "^1.2.1",
    "ts-node": "*",
    "tsconfig": "^7.0.0"
  },
  "deprecated": false,
  "description": "Compiles your TS app and restarts when files are modified.",
  "devDependencies": {
    "@types/node": "^8.0.4",
    "coffee-script": "^1.8.0",
    "eslint": "^2.0.0",
    "eslint-config-airbnb-base": "^3.0.1",
    "eslint-plugin-import": "^1.8.1",
    "esm": "^3.2.22",
    "tap": "^5.2.0",
    "touch": "^1.0.0",
    "tsconfig-paths": "^3.3.1",
    "typescript": "^2.3.4"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "files": [
    "bin",
    "icons",
    "lib"
  ],
  "homepage": "https://github.com/whitecolor/ts-node-dev#readme",
  "keywords": [
    "monitor",
    "reload",
    "restart",
    "supervisor",
    "watch"
  ],
  "license": "MIT",
  "main": "./lib",
  "name": "ts-node-dev",
  "optionalDependencies": {},
  "preferGlobal": true,
  "prettier": {
    "semi": false,
    "singleQuote": true
  },
  "readme": "# ts-node-dev\n\n> Tweaked version of [node-dev](https://github.com/fgnass/node-dev) that uses [ts-node](https://github.com/TypeStrong/ts-node) under the hood.\n\nIt restarts target node process when any of required files changes (as standard `node-dev`) but shares [Typescript](https://github.com/Microsoft/TypeScript/) compilation process between restarts. This significantly increases speed of restarting comparing to `node-dev -r ts-node/register ...`, `nodemon -x ts-node ...` variations because there is no need to instantiate `ts-node` compilation each time.\n\n## Install\n\n```\nyarn add ts-node-dev --dev\n```\n\n```\nnpm i ts-node-dev --save-dev\n```\n\n`ts-node` dependency version is not fixed, so it will install the latest version by default.\n\n## Usage\n\n```\nts-node-dev [node-dev|ts-node flags] [ts-node-dev flags] [node cli flags] [--] [script] [script arguments]\n```\n\nSo you just combine [node-dev](https://github.com/fgnass/node-dev) and [ts-node](https://github.com/TypeStrong/ts-node) options (see docs of those packages):\n\n```\nts-node-dev --respawn --transpileOnly server.ts\n```\n\nThere is also short alias `tsnd` for running `ts-node-dev`:\n\n```\ntsnd --respawn server.ts\n```\n\n**Also there are additional options specific to `ts-node-dev`:**\n\n- `--prefer-ts` (default: false) - for each `.js` file (that is not in `node_modules`) will try to check if corresponding `.ts` version exists and require it.\n- `--ignore-watch` (default: []) - files/folders to be [ignored by `node-dev`](https://github.com/fgnass/node-dev#ignore-paths). **But also this behaviour enhanced:** it will also make up `new RegExp` of passed ignore string and check absolute paths of required files for match.\n  So, to ignore everything in `node_modules`, just pass `--ignore-watch node_modules`.\n\n- `--debug` - Some additional debug output.\n- `--interval` - Polling interval (ms)\n- `--debounce` - Debounce file change events (ms, non-polling mode)\n- `--clear` (`--cls`) Will clear screen on restart\n- `--watch` - Explicitly add files or folders to watch and restart on change (list separated by commas)\n- `--exit-child` - Adds 'SIGTERM' exit handler in a child process.\n\n**Caveats and points of notice:**\n\n- Especially for large code bases always consider running with `--transpile-only` flag which is normal for dev workflow and will speed up things greatly. Note, that `ts-node-dev` will not put watch handlers on TS files that contain only types/interfaces (used only for type checking) - this is current limitation by design.\n\n- `--ignore-watch` will NOT affect files ignored by TS compilation. Use `--ignore` option (or `TS_NODE_IGNORE` env variable) to pass **RegExp strings** for filtering files that should not be compiled, by default `/node_modules/` are ignored.\n\n- Unknown flags (`node` cli flags are considered to be so) are treated like string value flags by default. The right solution to avoid ambiguity is to separate script name from option flags with `--`, for example:\n\n  ```\n  ts-node-dev --inspect -- my-script.ts\n  ```\n\n- The good thing is that `ts-node-dev` watches used `tsconfig.json` file, and will reinitialize compilation on its change, but you have to restart the process manually when you update used version of `typescript` or make any other changes that may effect compilation results.\n\n## License\n\nWTF.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/whitecolor/ts-node-dev.git"
  },
  "scripts": {
    "test": "node ./bin/ts-node-dev --exit-child --tree-kill --clear -r tsconfig-paths/register -r ./test/ts/add-require -r ./test/ts/add-require-2 -r esm -O \"{\\\"module\\\": \\\"es6\\\"}\" --preserve-symlinks --respawn --ignore-watch 'lib' --ignore-watch bin --prefer-ts --debug --poll --interval 1000 --cache-directory .ts-node --inspect -- test/ts/test-script test-arg --fd",
    "test-docker": "docker run --rm -v ${PWD}:/app mhart/alpine-node:8.7.0 sh -c 'cd app && node ./bin/ts-node-dev --cache-directory .ts-node test/ts/big'",
    "test-node-dev": "tap test/*.js",
    "ts-node-dev": "node ./bin/ts-node-dev"
  },
  "version": "1.0.0-pre.44"
}
